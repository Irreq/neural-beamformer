#!/usr/bin/python3

"""Script for converting JSON file to config file in a specific language"""

import json

import datetime

import sys


USAGE ="Usage: python3 config_maker.py /path/to/config.json /path/to/config.*"


def eval_expression(expr: str, table: dict):
    items = expr.split(" ")

    if len(items) == 1:
        first = items[0]

        if first in table:
            new_value = str(table[first])
            item = eval_expression(new_value, table)
        else:
            item = first

        return f"{item} "
    else:
        return f"{eval_expression(items[0], table)} " \
               f'{eval_expression(" ".join(items[1:]), table)}'


class ConfigBuilder(object):
    def __init__(self, file):
        self.file = file

    def is_expression(self, value):
        return isinstance(value, str)

    def write(self, json_data):
        with open(self.file, "w+") as config:
            config.write(self.header())
            for key, value in json_data.items():
                if self.is_expression(value):
                    try:
                        output = eval(eval_expression(value, json_data))

                    except NameError:
                        output = f'"{value}"'
                else:
                    output = json.dumps(value)

                config.write(self.data(key, output))

            config.write(self.footer())

            config.close()

    def header(self):
        return "#This is default header\n"
    def data(self, key: str, output: object) -> str:
        return f"{key} = {output}\n"
    def footer(self):
        return "#This is default footer\n"
    

class C(ConfigBuilder):
    def __init__(self, file):
        super().__init__(file)

    def header(self):
        now = datetime.datetime.now() #.isoformat()
        return  f"""
#ifndef CONFIG_H
#define CONFIG_H

// NOTICE!

// DO NOT EDIT THIS FILE!
// THIS FILE IS AUTO-GENERATED BY A SCRIPT. IF YOU WANT TO EDIT THE CONFIGURATIONS
// CHANGE THE VALUES IN: "config.json".

// GENERATED: {now}

"""

    def data(self, key: str, output: object) -> str:
        return f"#define {key} {output}\n"
    
    def footer(self):
        return "\n#endif\n"
    
class Python(ConfigBuilder):
    def __init__(self, file):
        super().__init__(file)

    def header(self):
        now = datetime.datetime.now() #.isoformat()
        return  f"""#!/usr/bin/python3

# NOTICE!

# DO NOT EDIT THIS FILE!
# THIS FILE IS AUTO-GENERATED BY A SCRIPT. IF YOU WANT TO EDIT THE CONFIGURATIONS
# CHANGE THE VALUES IN: "config.json".

# GENERATED: {now}

"""

    def data(self, key: str, output: object) -> str:
        return f"{key} = {output}\n"
    
    def footer(self):
        return ""


if  len(sys.argv[1:]) != 2:
    print(USAGE)
    sys.exit(1)

config_json, config_h = sys.argv[1:]


if __name__ == '__main__':
    with open(config_json, 'r') as json_file:
        json_data = json.load(json_file)


    c = C(config_h)
    c.write(json_data)

    # py = Python(config_h+".py")
    # py.write(json_data)