#!/usr/bin/python3

"""Script for converting JSON file to C/C++ header file"""

import json

import datetime

import sys


now = datetime.datetime.now() #.isoformat()

BEGIN_NOTICE_H = f"""
#ifndef CONFIG_H
#define CONFIG_H

// NOTICE!

// DO NOT EDIT THIS FILE!
// THIS FILE IS AUTO-GENERATED BY A SCRIPT. IF YOU WANT TO EDIT THE CONFIGURATIONS
// CHANGE THE VALUES IN: "config.json".

// GENERATED: {now}

"""

END_NOTICE_H = """

#endif
"""

USAGE ="Usage: python3 config_maker.py /path/to/config.json /path/to/config.h"


def json_to_config_h(json_data, output_file):
    """Convert JSON file to config.h header file"""
    with open(output_file, 'w+') as config_h:
        config_h.write(BEGIN_NOTICE_H)
        for key, value in json_data.items():
            if isinstance(value, str) and "{" in value and "}" in value:
                config_h.write(f"#define {key} {value[1:-1]}\n")
            else:
                config_h.write(f"#define {key} {json.dumps(value)}\n")
        config_h.write(END_NOTICE_H)

if  len(sys.argv[1:]) != 2:
    print(USAGE)
    sys.exit(1)

config_json, config_h = sys.argv[1:]
# assert len(sys.argv[1:]) == 2, f"{USAGE}"

# print(sys.argv[1:])

if __name__ == '__main__':
    with open(config_json, 'r') as json_file:
        json_data = json.load(json_file)

    json_to_config_h(json_data, config_h)